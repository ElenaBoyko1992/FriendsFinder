{"version":3,"file":"static/js/591.55555176.chunk.js","mappings":"0KACA,G,QAA8B,8BAA9B,EAAqE,yBAArE,EAA6G,8BAA7G,EAAwJ,4BAAxJ,EAA6L,wBAA7L,EAAiQ,0BAAjQ,EAAqS,yBAArS,EAA4U,6BAA5U,EAA6X,mC,6BCmB7X,EAXmB,SAACA,GAChB,IAAIC,EAAO,YAAcD,EAAME,GAE/B,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASC,gBAAiBD,EAAUE,GAAIL,EAAxC,SAA+CD,EAAMO,UCDjE,EANgB,SAACP,GACb,OACI,gBAAKG,UAAWC,EAAhB,SAA4BJ,EAAMQ,W,6BC4BpCC,GAAeC,EAAAA,EAAAA,GAAiB,KAgBhCC,GAAsBC,EAAAA,EAAAA,GAAmC,CAE3DC,KAAM,wBAFkBD,EAdiD,SAACZ,GAC1E,OACI,kBAAMc,SAAUd,EAAMe,aAAcZ,UAAWC,EAA/C,WACI,0BACKY,EAAAA,EAAAA,IAAY,qBAAsB,iBAAkB,CAACC,EAAAA,EAAUR,GAAeS,EAAAA,GAAU,GAAI,GAAjF,UAAwFC,EAAAA,EAAAA,cAExG,0BACI,mBAAQhB,UAAS,UAAKC,EAAL,YAA4Be,EAAAA,EAAAA,QAA7C,0BAYhB,EAhDgB,SAACnB,GACb,IAAIoB,EAAQpB,EAAMqB,YAEdC,EAAkBF,EAAMG,QAAQC,KAAI,SAAAC,GAAC,OAAI,SAAC,EAAD,CAAYlB,KAAMkB,EAAElB,KAAiBL,GAAIuB,EAAEvB,IAAZuB,EAAEvB,OAC1EwB,EAAmBN,EAAMO,SAASH,KAAI,SAAAI,GAAC,OAAI,SAAC,EAAD,CAASpB,QAASoB,EAAEpB,SAAcoB,EAAE1B,OAMnF,OACI,gBAAKC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKkB,KAEL,iBAAKnB,UAAWC,EAAhB,WACI,yBAAMsB,KACN,SAACf,EAAD,CAAqBG,SAZf,SAACe,GACnB7B,EAAM8B,YAAYD,EAAOE,4B,6BCIjC,GAAeC,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAdkB,SAACb,GACnB,MAAO,CACHC,YAAaD,EAAMC,gBAGF,SAACa,GACtB,MAAO,CACHJ,YAAa,SAACC,GACVG,GAASC,EAAAA,EAAAA,GAAmBJ,SAOpCK,EAAAA,EAFJ,CAEsBC","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsPage\":\"Dialogs_dialogsPage__+57b2\",\"dialogs\":\"Dialogs_dialogs__68vN-\",\"dialogsItems\":\"Dialogs_dialogsItems__HJW5C\",\"dialogItem\":\"Dialogs_dialogItem__IsOiQ\",\"active\":\"Dialogs_active__umKIn\",\"dialog\":\"Dialogs_dialog__dKPAL\",\"messages\":\"Dialogs_messages__DroMa\",\"message\":\"Dialogs_message__QyJnD\",\"messageForm\":\"Dialogs_messageForm__SjU50\",\"messageFormButton\":\"Dialogs_messageFormButton__jmmlv\"};","import React from 'react';\nimport s from './../Dialogs.module.css';\nimport {NavLink} from \"react-router-dom\";\n\ntype DialogItemPropsType = {\n    name: string\n    id: number\n}\n\nconst DialogItem = (props: DialogItemPropsType) => {\n    let path = '/dialogs/' + props.id;\n\n    return (\n        <div className={s.dialogItem} >\n            <NavLink activeClassName={s.active} to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\n\nexport default DialogItem;","import React from 'react';\nimport s from './../Dialogs.module.css';\n\ntype MessagePropsType = {\n    message: string\n}\n\nconst Message = (props: MessagePropsType) => {\n    return (\n        <div className={s.message}>{props.message}</div>\n    )\n}\n\nexport default Message;","import React from 'react';\nimport s from './Dialogs.module.css';\nimport commonStyles from '../common/CommonStyles.module.css';\nimport DialogItem from \"./DialogItem/DialogItem\";\nimport Message from \"./Message/Message\";\nimport {DialogsPropsType} from \"./DialogsContainer\";\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\nimport {createField, Textarea} from \"../common/FormsControls/FormsControls\";\nimport {maxLengthCreator, required} from \"utils/validators/validators\";\n\nconst Dialogs = (props: DialogsPropsType) => {\n    let state = props.dialogsPage;\n\n    let dialogsElements = state.dialogs.map(d => <DialogItem name={d.name} key={d.id} id={d.id}/>);\n    let messagesElements = state.messages.map(m => <Message message={m.message} key={m.id}/>);\n\n    const addNewMessage = (values: AddNewMessageValuesType) => {\n        props.sendMessage(values.newMessageBody);\n    }\n\n    return (\n        <div className={s.dialogsPage}>\n            <div className={s.dialogs}>\n                <div className={s.dialogsItems}>\n                    {dialogsElements}\n                </div>\n                <div className={s.messages}>\n                    <div>{messagesElements}</div>\n                    <AddMessageFormRedux onSubmit={addNewMessage}/>\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\n\nconst maxLength100 = maxLengthCreator(100);\n\nconst AddMessageForm: React.FC<InjectedFormProps<AddNewMessageValuesType>> = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit} className={s.messageForm}>\n            <div>\n                {createField('Enter your message', 'newMessageBody', [required, maxLength100], Textarea, {}, '', `${commonStyles.textarea}`)}\n            </div>\n            <div>\n                <button className={`${s.messageFormButton} ${commonStyles.button}`}>Send</button>\n            </div>\n        </form>\n\n    )\n}\n\nconst AddMessageFormRedux = reduxForm<AddNewMessageValuesType>({\n    // a unique name for the form\n    form: 'dialogAddMessageForm'\n})(AddMessageForm)\n\nexport default Dialogs;\n\n//types\ntype AddNewMessageValuesType = {\n    newMessageBody: string\n}","import React from 'react';\nimport {DialogsPageType, sendMessageCreator} from \"redux/dialogs-reducer\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {ReduxStoreType} from \"redux/redux-store\";\nimport {compose, Dispatch} from \"redux\";\nimport {withAuthRedirect} from \"hoc/withAuthRedirect\";\n\nlet mapStateToProps = (state: ReduxStoreType): MapStatePropsType => { //смысл данной функции замапить часть стейта на нужные нашей презентационной компоненте пропсы\n    return {\n        dialogsPage: state.dialogsPage,\n    }\n}\nlet mapDispatchToProps = (dispatch: Dispatch): mapDispatchPropsType => { //смысл данной функции замапить часть коллбэков из стора на нужные нашей презентационной компоненте пропсы\n    return {\n        sendMessage: (newMessageBody: string) => {\n            dispatch(sendMessageCreator(newMessageBody));\n        },\n    }\n}\n\nexport default compose<React.ComponentType>(\n    connect(mapStateToProps, mapDispatchToProps),\n    withAuthRedirect)(Dialogs)\n\n//types\ntype MapStatePropsType = {\n    dialogsPage: DialogsPageType\n}\ntype mapDispatchPropsType = {\n    sendMessage: (newMessageBody: string) => void\n}\nexport type DialogsPropsType = MapStatePropsType & mapDispatchPropsType"],"names":["props","path","id","className","s","activeClassName","to","name","message","maxLength100","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","commonStyles","state","dialogsPage","dialogsElements","dialogs","map","d","messagesElements","messages","m","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","withAuthRedirect","Dialogs"],"sourceRoot":""}